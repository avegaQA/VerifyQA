// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Verify.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("IOWA Board of Medicine")]
    public partial class IOWABoardOfMedicineFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "IOWABoardOfMedicine.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "IOWA Board of Medicine", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Search by first name, last name and License number")]
        [NUnit.Framework.CategoryAttribute("SNS")]
        [NUnit.Framework.CategoryAttribute("SQS")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.003")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.004")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.005")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.006")]
        [NUnit.Framework.TestCaseAttribute("Fred", "Goldblatt", "DO-02020", "Jan 31 1984 12:00AM", "11/01/2024", "0", "x02", null)]
        [NUnit.Framework.TestCaseAttribute("Sally", "Smith", "R-12632", "06/08/2022", "06/30/2024", "0", "F74BF2B5C91BB04243432CD8AF30A7D2", null)]
        [NUnit.Framework.TestCaseAttribute("Kathleen", "Jones", "MD-32008", "Aug 12 1997 12:00AM", "12/01/2024", "0", "x01", null)]
        [NUnit.Framework.TestCaseAttribute("Abigail", "Scrogum", "R-12485", "05/20/2022", "06/30/2025", "0", "x02", null)]
        [NUnit.Framework.TestCaseAttribute("Kirk", "Smith", "NA", "NA", "04/26/2002", "2", "F74BF2B5C91BB04243432CD8AF30A7D2", null)]
        public virtual void SearchByFirstNameLastNameAndLicenseNumber(string firstName, string lastName, string licenseNumber, string issueDate, string expirationDate, string disciplinaryActionRecords, string licenseHash, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SNS",
                    "SQS",
                    "SRS_459745.003",
                    "SRS_459745.004",
                    "SRS_459745.005",
                    "SRS_459745.006"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("firstName", firstName);
            argumentsOfScenario.Add("lastName", lastName);
            argumentsOfScenario.Add("licenseNumber", licenseNumber);
            argumentsOfScenario.Add("issueDate", issueDate);
            argumentsOfScenario.Add("expirationDate", expirationDate);
            argumentsOfScenario.Add("disciplinaryActionRecords", disciplinaryActionRecords);
            argumentsOfScenario.Add("licenseHash", licenseHash);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search by first name, last name and License number", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 10
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 12
 testRunner.Given("I open the \"IOWABoardOfMedicine\" json in folder \"IOWAboardOfMedicine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table2.AddRow(new string[] {
                            "data.searchAttributes.individualNames[0].firstName",
                            string.Format("{0}", firstName)});
                table2.AddRow(new string[] {
                            "data.searchAttributes.individualNames[0].lastName",
                            string.Format("{0}", lastName)});
                table2.AddRow(new string[] {
                            "data.searchAttributes.licenseNumber",
                            string.Format("{0}", licenseNumber)});
                table2.AddRow(new string[] {
                            "data.licenseHash",
                            string.Format("{0}", licenseHash)});
#line 13
 testRunner.And("I prepare the JSON data", ((string)(null)), table2, "And ");
#line hidden
#line 19
 testRunner.And("I load the messageId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 20
 testRunner.And("I set IABoardOfMedicine message attributes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 22
 testRunner.When("I publish the json to the \"arn:aws:sns:us-east-2:379493731719:pdm-gondordev01-vfy" +
                        "-psvDaqRequests-topic\" arn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 26
 testRunner.Then("I look for the JSON response in \"https://sqs.us-east-2.amazonaws.com/379493731719" +
                        "/pdm-dev-vfy-testAutomationSubscriber-queue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 27
 testRunner.And("I check for error messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.And("I parse the json response for IOWA Board of medicine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table3.AddRow(new string[] {
                            "data.licenseDetails.issueDate",
                            string.Format("{0}", issueDate)});
                table3.AddRow(new string[] {
                            "data.licenseDetails.expirationDate",
                            string.Format("{0}", expirationDate)});
                table3.AddRow(new string[] {
                            "data.licenseDetails.licenseNumber",
                            string.Format("{0}", licenseNumber)});
                table3.AddRow(new string[] {
                            "messageType",
                            "LicensePSVData_Acquired"});
#line 29
 testRunner.And("I verify the JSON response", ((string)(null)), table3, "And ");
#line hidden
#line 36
 testRunner.Then("I get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
 testRunner.And("I verify the proof of artifact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 38
 testRunner.And("I verify the Raw HTML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And(string.Format("I check the disciplinary records to match with \"{0}\"", disciplinaryActionRecords), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("jurisdiction, LicenseType and FieldOFLicensure valid combinations")]
        [NUnit.Framework.CategoryAttribute("SNS")]
        [NUnit.Framework.CategoryAttribute("SQS")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.001")]
        [NUnit.Framework.CategoryAttribute("NEW")]
        [NUnit.Framework.TestCaseAttribute("IA", "010", "state_issued", null)]
        [NUnit.Framework.TestCaseAttribute("IA", "015", "state_issued", null)]
        [NUnit.Framework.TestCaseAttribute("IA", "020", "state_issued", null)]
        [NUnit.Framework.TestCaseAttribute("IA", "025", "state_issued", null)]
        public virtual void JurisdictionLicenseTypeAndFieldOFLicensureValidCombinations(string jurisdiction, string fieldOfLicensure, string licenseType, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "SNS",
                    "SQS",
                    "SRS_459745.001",
                    "NEW"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("jurisdiction", jurisdiction);
            argumentsOfScenario.Add("FieldOfLicensure", fieldOfLicensure);
            argumentsOfScenario.Add("LicenseType", licenseType);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("jurisdiction, LicenseType and FieldOFLicensure valid combinations", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 56
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 58
 testRunner.Given("I open the \"IOWABoardOfMedicine\" json in folder \"IOWAboardOfMedicine\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table4.AddRow(new string[] {
                            "data.searchAttributes.individualNames[0].firstName",
                            "Sally"});
                table4.AddRow(new string[] {
                            "data.searchAttributes.individualNames[0].lastName",
                            "Smith"});
                table4.AddRow(new string[] {
                            "data.searchAttributes.licenseNumber",
                            "R-12632"});
                table4.AddRow(new string[] {
                            "data.searchAttributes.jurisdiction",
                            string.Format("{0}", jurisdiction)});
                table4.AddRow(new string[] {
                            "data.searchAttributes.fieldOfLicensure",
                            string.Format("{0}", fieldOfLicensure)});
                table4.AddRow(new string[] {
                            "data.searchAttributes.licenseType",
                            string.Format("{0}", licenseType)});
#line 59
 testRunner.And("I prepare the JSON data", ((string)(null)), table4, "And ");
#line hidden
#line 67
 testRunner.And("I load the messageId", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 68
 testRunner.And("I set IABoardOfMedicine message attributes", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 70
 testRunner.When("I publish the json to the \"arn:aws:sns:us-east-2:379493731719:pdm-gondordev01-vfy" +
                        "-psvDaqRequests-topic\" arn", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 72
 testRunner.Then("I look for the JSON response in \"https://sqs.us-east-2.amazonaws.com/379493731719" +
                        "/pdm-dev-vfy-testAutomationSubscriber-queue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 73
 testRunner.And("I check for error messages", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 74
 testRunner.And("I parse the json response for IOWA Board of medicine", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "key",
                            "value"});
                table5.AddRow(new string[] {
                            "messageType",
                            "LicensePSVData_Acquired"});
                table5.AddRow(new string[] {
                            "data.licenseDetails.issueDate",
                            "06/08/2022"});
#line 75
 testRunner.And("I verify the JSON response", ((string)(null)), table5, "And ");
#line hidden
#line 81
 testRunner.Then("I get the access token", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 82
 testRunner.And("I verify the proof of artifact", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.And("I verify the Raw HTML", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Check for batchItemFailures")]
        [NUnit.Framework.CategoryAttribute("Lambda")]
        [NUnit.Framework.CategoryAttribute("SRS_459745.008")]
        [NUnit.Framework.TestCaseAttribute("IOWAHappyLambdaTester", "0", null)]
        [NUnit.Framework.TestCaseAttribute("IOWAUnhappyLambdaTester", "1", null)]
        public virtual void CheckForBatchItemFailures(string jSONname, string numberOfFailures, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "Lambda",
                    "SRS_459745.008"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("JSONname", jSONname);
            argumentsOfScenario.Add("NumberOfFailures", numberOfFailures);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Check for batchItemFailures", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 98
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 99
 testRunner.Given(string.Format("I open the \"{0}\" json in folder \"IOWAboardOfMedicine\"", jSONname), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 101
 testRunner.When("I test the lambda function \"pdm-dev-vfy-daqWorkers-IABoardOfMedicine-func\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 103
 testRunner.Then(string.Format("I verify the lambda response \"{0}\"", numberOfFailures), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
